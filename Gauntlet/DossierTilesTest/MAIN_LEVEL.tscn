[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

var cell_size: int = 16
var panel_cell_number: int = 20
var panel_size: int = cell_size * panel_cell_number
export var panel_number: int = 3

# Array containing the panels that are placed and still have a side open.
var open_indexes: Array = []
# Array containing the panels that aren't placed yet and can be filled.
var available_indexes: Array = []
# Stores the \"path\" the algorithm took to build the level with directions on each placed panel.
var cell_informations: Dictionary = {}

func _ready() -> void:
	# Randomize internal seed.
	randomize()
	# Initialize available_indexes taking panel_number into account : panel_number x panel_number cells.
	initialize_available_indexes()
	# Very first panel, placed randomly in a 3x3 grid.
	generate_cell(available_indexes[randi() % len(available_indexes)])
	# Generate the whole level panels on the available_indexes.
	digital_level_build()
	# Place the panels on the level with the right open sides.
	physical_level_build()

# Spacebar to reinitialize/test the level generation
func _process(delta: float):
	if Input.is_action_just_pressed(\"ui_accept\"):
		reinitialize_level_build()

func digital_level_build() -> void:
	for n in len(available_indexes):
		# Choose a tile from the ones already in place in the board game.
		var from_tile: Vector2 = open_indexes[randi() % len(open_indexes)]
		# Return a Dictionary with the index and direction of possible tiles.
		var possible_tiles: Dictionary = available_sides(from_tile)
		# Set all index into temporary array to choose a random key(index) from.
		var available_keys: Array = possible_tiles.keys()
		# Choose a tile to get to, by getting its index.
		var to_tile: Vector2 = available_keys[randi() % len(available_keys)]
		# Store the direction taken \"from_tile to_tile\".
		var direction: String = possible_tiles.get(to_tile)
		# Store all the above information to the cell_informations dictionary.
		store_tile_informations(from_tile, to_tile, direction)
		generate_cell(to_tile)
		# If panels don't have sides available : remove them from the chosen possibility.
		delete_if_unavailable_sides()

# Add directions taken by the program to build the level so every panel is pseudo-randomly connected.
func store_tile_informations(from: Vector2, to: Vector2, from_direction: String) -> void:
	var to_direction: String
	if from_direction == \"Top\":
		to_direction = \"Bottom\"
	elif from_direction == \"Bottom\":
		to_direction = \"Top\"
	elif from_direction == \"Left\":
		to_direction = \"Right\"
	elif from_direction == \"Right\":
		to_direction = \"Left\"
		
	# if key already exists, initialize array, else append to it.
	if cell_informations.get(from) == null:
		cell_informations[from] = [from_direction]
	else:
		cell_informations[from].append(from_direction)
		
	if cell_informations.get(to) == null:
		cell_informations[to] = [to_direction]
	else:
		cell_informations[to].append(to_direction)

# Fills an index with a cell(panel). 
# Consequently add it to the open_indexes and erase it from the availables.
func generate_cell(index: Vector2) -> void:
	open_indexes.append(index)
	available_indexes.erase(index)

# Goes through every open_indexes, checking if at least one side is open. Else : remove it from array.
func delete_if_unavailable_sides() -> void:
	var i: int = 0
	while i < len(open_indexes):
		if !available_indexes.has(open_indexes[i] + Vector2(1, 0)) && !available_indexes.has(open_indexes[i] - Vector2(1, 0)) && !available_indexes.has(open_indexes[i] + Vector2(0, 1)) && !available_indexes.has(open_indexes[i] - Vector2(0, 1)):
			open_indexes.erase(open_indexes[i])
		else:
			i += 1

# Making an array with available side indexes.
func available_sides(chosen_tile_index: Vector2) -> Dictionary:
	var dict_test: Dictionary = {}
	# Right
	if available_indexes.has(chosen_tile_index + Vector2(1, 0)):
		dict_test[chosen_tile_index + Vector2(1, 0)] = \"Right\"
	# Left
	if available_indexes.has(chosen_tile_index - Vector2(1, 0)):
		dict_test[chosen_tile_index - Vector2(1, 0)] = \"Left\"
	# Bottom
	if available_indexes.has(chosen_tile_index + Vector2(0, 1)):
		dict_test[chosen_tile_index + Vector2(0, 1)] = \"Bottom\"
	# Top
	if available_indexes.has(chosen_tile_index - Vector2(0, 1)):
		dict_test[chosen_tile_index - Vector2(0, 1)] = \"Top\"
	
	return dict_test

# Take panel_number to make an array out of empty indexes that will be filled later.
func initialize_available_indexes() -> void:
	for x in panel_number:
		for y in panel_number:
			available_indexes.append(Vector2(x,y))

# Take every keys in cell_informations. join its values to get the name of the scene to instance
# Then add it to the map, depending on the key x/y multiplied by panel_size
func physical_level_build() -> void:
	for panel_index in cell_informations.keys():
		var directions_unsorted: Array = cell_informations.get(panel_index)
		directions_unsorted.sort()
		var directions_sorted: PoolStringArray = directions_unsorted
		var panel_name: String = directions_sorted.join(\"_\")
		var tilemap: TileMap = load(\"res://DossierTilesTest/Panels/\"+panel_name+\".tscn\").instance()
		tilemap.position = Vector2(panel_index.x * panel_size, panel_index.y * panel_size)
		add_child(tilemap)

# Method to reinitialize the level by clicking on the space bar.
func reinitialize_level_build() -> void:
	for children in get_children():
		children.queue_free()
	initialize_available_indexes()
	cell_informations.clear()
	generate_cell(available_indexes[randi() % len(available_indexes)])
	digital_level_build()
	physical_level_build()"

[node name="Node" type="Node"]
script = SubResource( 1 )

