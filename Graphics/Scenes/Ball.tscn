[gd_scene load_steps=4 format=2]

[ext_resource path="res://Sprite/Ball.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Area2D

var speed: float
var shape_radius: int
var direction: Vector2
var line_count: int
var dict: Dictionary
var index: int = 0

onready var shape = ($shape as CollisionShape2D)
var line := preload(\"res://Scenes/Line.tscn\")

func _ready() -> void:
	direction.y = rand_range(-1, 1)
	shape.shape = shape.shape.duplicate()
	shape.shape.radius = shape_radius
	dict = dict.duplicate()

func _physics_process(delta: float) -> void:
	position.x += speed * direction.x
	position.y += speed * direction.y

func _on_vis_screen_exited():
	get_parent().ball_number -=1
	queue_free()

func _on_Ball_area_entered(area):
	if !dict.has(area) && line_count < 2 && area.line_count < 2:
		var new_line = line.instance()
		new_line.add_point(position)
		new_line.add_point(area.position)
		new_line.ball0 = self
		new_line.ball1 = area
		get_parent().add_child(new_line)
		dict[area] = new_line
		area.dict[self] = new_line
		line_count = dict.size()
		area.line_count = area.dict.size()
	else:
		return
	
#	if line_count < 2 && area.line_count < 2:
#		var new_line = line.instance()
#		new_line.add_point(position)
#		new_line.add_point(area.position)
#		new_line.ball0 = self
#		new_line.ball1 = area
#		get_parent().add_child(new_line)
#		dict[area] = new_line
#		line_count = dict.size()

func _on_Ball_area_exited(area):
	get_parent().delete_line(self, area)"

[sub_resource type="CircleShape2D" id=2]

[node name="Ball" type="Area2D"]
modulate = Color( 0, 0.396078, 0.611765, 1 )
z_index = 1
script = SubResource( 1 )

[node name="sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="shape" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="vis" type="VisibilityNotifier2D" parent="."]
rect = Rect2( -3, -3, 6, 6 )
[connection signal="area_entered" from="." to="." method="_on_Ball_area_entered"]
[connection signal="area_exited" from="." to="." method="_on_Ball_area_exited"]
[connection signal="screen_exited" from="vis" to="." method="_on_vis_screen_exited"]
